# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import wallet_pb2 as wallet__pb2


class WalletServiceStub(object):
    """Serviço de Carteira
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetBalance = channel.unary_unary(
                '/wallet.WalletService/GetBalance',
                request_serializer=wallet__pb2.BalanceRequest.SerializeToString,
                response_deserializer=wallet__pb2.BalanceResponse.FromString,
                )
        self.CreatePaymentOrder = channel.unary_unary(
                '/wallet.WalletService/CreatePaymentOrder',
                request_serializer=wallet__pb2.OrderRequest.SerializeToString,
                response_deserializer=wallet__pb2.OrderResponse.FromString,
                )
        self.Transfer = channel.unary_unary(
                '/wallet.WalletService/Transfer',
                request_serializer=wallet__pb2.TransferRequest.SerializeToString,
                response_deserializer=wallet__pb2.TransferResponse.FromString,
                )
        self.EndExecution = channel.unary_unary(
                '/wallet.WalletService/EndExecution',
                request_serializer=wallet__pb2.EndRequest.SerializeToString,
                response_deserializer=wallet__pb2.EndResponse.FromString,
                )


class WalletServiceServicer(object):
    """Serviço de Carteira
    """

    def GetBalance(self, request, context):
        """Consulta o saldo de uma carteira
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreatePaymentOrder(self, request, context):
        """Cria uma ordem de pagamento
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Transfer(self, request, context):
        """Transfere uma ordem de pagamento para outra carteira
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EndExecution(self, request, context):
        """Encerra a execução do servidor
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_WalletServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetBalance': grpc.unary_unary_rpc_method_handler(
                    servicer.GetBalance,
                    request_deserializer=wallet__pb2.BalanceRequest.FromString,
                    response_serializer=wallet__pb2.BalanceResponse.SerializeToString,
            ),
            'CreatePaymentOrder': grpc.unary_unary_rpc_method_handler(
                    servicer.CreatePaymentOrder,
                    request_deserializer=wallet__pb2.OrderRequest.FromString,
                    response_serializer=wallet__pb2.OrderResponse.SerializeToString,
            ),
            'Transfer': grpc.unary_unary_rpc_method_handler(
                    servicer.Transfer,
                    request_deserializer=wallet__pb2.TransferRequest.FromString,
                    response_serializer=wallet__pb2.TransferResponse.SerializeToString,
            ),
            'EndExecution': grpc.unary_unary_rpc_method_handler(
                    servicer.EndExecution,
                    request_deserializer=wallet__pb2.EndRequest.FromString,
                    response_serializer=wallet__pb2.EndResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'wallet.WalletService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class WalletService(object):
    """Serviço de Carteira
    """

    @staticmethod
    def GetBalance(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/wallet.WalletService/GetBalance',
            wallet__pb2.BalanceRequest.SerializeToString,
            wallet__pb2.BalanceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreatePaymentOrder(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/wallet.WalletService/CreatePaymentOrder',
            wallet__pb2.OrderRequest.SerializeToString,
            wallet__pb2.OrderResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Transfer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/wallet.WalletService/Transfer',
            wallet__pb2.TransferRequest.SerializeToString,
            wallet__pb2.TransferResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def EndExecution(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/wallet.WalletService/EndExecution',
            wallet__pb2.EndRequest.SerializeToString,
            wallet__pb2.EndResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
